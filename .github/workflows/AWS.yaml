name: AWS Server Deployment

on:
  push:
    branches:
      - development

jobs:
  build:
    name: Build Server
    runs-on: ubuntu-latest

    steps:
      - name: ⚙ Configure GitHub Actions
        uses: actions/checkout@v3

      - name: 🛠 Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: 🛠 Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: 🚧 Install dependencies and Build project
        run: pnpm install --no-frozen-lockfile && pnpm run build

      - name: 🏷 Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: Build
          path: |
            .npmrc
            dist/
            prisma/
            Dockerfile
            pnpm-lock.yaml
            package.json

  publish:
    name: Build and Push Image
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: 🏷 Download artifact
        uses: actions/download-artifact@v3
        with:
          name: Build

      - name: 🔒 AWS Authentication
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: 🚧 Set up Cloud SDK
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: 🚀 Build and publish to Elastic Container Registry
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: dashboard
          IMAGE_TAG: ${{ github.base_ref }} # latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#  deploy:
#    if: github.event.pull_request.merged == true
#    name: Update ECS Service
#    needs: publish
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      id-token: write
#
#    steps:
#      - name: 🔒 AWS Authentication
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1
#
#      - name: 🚀 Publish to Elastic Container Service
#        run: |
#          aws ecs update-service --cluster dashboard --service ${{ github.base_ref }} --force-new-deployment
